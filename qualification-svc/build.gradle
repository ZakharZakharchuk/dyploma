import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.openapi.generator" version "$openApiGeneratorVersion"
    id "org.jsonschema2pojo" version "$jsonSchema2PojoVersion"
}
sourceSets.main.java.srcDirs += "$buildDir/generated/src/main/java"


group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    openApiContracts
    eventApiContracts
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation "org.openapitools:jackson-databind-nullable:$openapiJacksonDatabindNullableVersion"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springDocOpenApiUiVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.0'
    eventApiContracts files("D:/kpi/dyploma/event-contracts/build/libs/event-contracts-0.0.1-SNAPSHOT.jar")
    annotationProcessor( 'org.springframework.boot:spring-boot-configuration-processor')
}

tasks.named('test') {
    useJUnitPlatform()
}

openApiGenerate {
    generatorName = 'spring'
    inputSpec = "$rootDir/src/main/resources/qualification-spec.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = 'com.example.search.endpoint.rest.api'
    modelPackage = 'com.example.search.endpoint.rest.dto'
    modelNameSuffix = 'Dto'
    configOptions = [
            generatedConstructorWithRequiredArgs: "false",
            interfaceOnly                       : "true",
            useSpringController                 : "true",
            useTags                             : "true",
            dateLibrary                         : "java8",
            skipDefaultInterface                : "true",
            useResponseEntity                   : "true",
            useSpringBoot3                      : "true",
            additionalModelTypeAnnotations      :
                    """
                    @com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
                    @lombok.Builder
                    @lombok.NoArgsConstructor
                    @lombok.AllArgsConstructor
                    """

    ]
    typeMappings = [
            "OffsetDateTime" : "Instant",
    ]
    importMappings = [
            "java.time.OffsetDateTime" : "java.time.Instant",
    ]
}

compileJava.dependsOn tasks.named('openApiGenerate')

task extractEventsApiContractsSchema(type: Copy) {
    from zipTree(configurations.eventApiContracts.files.find())
    into "$buildDir/unpacked/eventsapi"
}

tasks.named('generateJsonSchema2Pojo'){
    dependsOn tasks.extractEventsApiContractsSchema
}

def eventJsonSchemaFileList = [
        "$buildDir/unpacked/eventsapi/events/PersonUpdated",
        "$buildDir/unpacked/eventsapi/events/PersonDeleted",
        "$buildDir/unpacked/eventsapi/events/QualificationUpdated"
]

jsonSchema2Pojo {
    source = files(eventJsonSchemaFileList)
    targetPackage = 'com.example.search.endpoint.messaging.dto'
    includeAdditionalProperties = false
    includeToString = true
    includeHashcodeAndEquals = false
    annotationStyle = 'jackson'
    useTitleAsClassname = true
    includeJsr303Annotations = true
    useJakartaValidation = true
}
